@function pow($number, $exponent) {
  $result: 1;

  @if $exponent > 0 {
    @for $_ from 1 through $exponent {
      $result: $result * $number;
    }
  }

  @return $result;
}

@function _tint($color, $percentage: 8%) {
  @return mix(white, $color, $percentage);
}

@function _shade($color, $percentage: 8%) {
  @return mix(black, $color, $percentage);
}

@function _color($type) {
  @if map-has-key($colors, $type) {
    @return map-get($colors, $type);
  }

  @error 'Unknown `#{$type}` in $colors map.';
  @return null;
}

@function _gradient($type: 'accent', $percentage: 0%) {
  @return radial-gradient(
      120% 120% at 50% 120%,
      rgba(_tint(_color('#{$type}-low'), $percentage), 0.32) 0%,
      rgba(255, 255, 255, 0) 100%
    ),
    radial-gradient(
      120% 120% at 50% -20%,
      rgba(_tint(_color('#{$type}-low'), $percentage), 0.64) 0%,
      rgba(255, 255, 255, 0) 100%
    ),
    _color('#{$type}-high');
}

@function _shadow($type: 'bottom', $size: 8, $color: _color('accent-high')) {
  $w: unquote('#{$size}px');

  /* prettier-ignore */
  $shadows: (
    /*  CSS Spec:  | style | offset-x | offset-y | blur-radius | spread-radius | color */
    top          :            0          (-$w)       $w            (-$w)       $color,
    right        :            $w         0           $w            (-$w)       $color,
    bottom       :            0          $w          $w            (-$w)       $color,
    left         :            (-$w)      0           $w            (-$w)       $color,
    all          :            0          0           $w                        $color,
    inset-top    : inset      0          $w          $w            (-$w)       $color,
    inset-right  : inset      (-$w)      0           $w            (-$w)       $color,
    inset-bottom : inset      0          (-$w)       $w            (-$w)       $color,
    inset-left   : inset      $w         0           $w            (-$w)       $color,
    inset-all    : inset      0          0           $w                        $color,

    /* You may also combine and comma separate any shadows from above */
    left-right       : (       (-$w) 0     $w (-$w) $color,       $w    0     $w (-$w) $color),
    top-bottom       : (       0     (-$w) $w (-$w) $color,       0     $w    $w (-$w) $color),
    inset-left-right : (inset  $w    0     $w (-$w) $color, inset (-$w) 0     $w (-$w) $color),
    inset-top-bottom : (inset  0     $w    $w (-$w) $color, inset 0     (-$w) $w (-$w) $color),
  );

  @if map-has-key($shadows, $type) {
    @return map-get($shadows, $type);
  }

  @error 'Unknown `#{$type}` in $shadows map.';
  @return null;
}

@function _var($component, $property) {
  @return var(_define-var($component, $property));
}

@function _define-var($component: null, $property, $domain: 'ck') {
  @if $component {
    @return unquote('--#{$domain}-#{$component}-#{$property}');
  }

  @return unquote('--#{$domain}-#{$property}');
}

@function _config-var($component, $property, $map: $properties) {
  @if not(type-of($map) == 'map') {
    @error 'Unknown `#{$map}` map.';
    @return null;
  }

  $default: map-get($map, $property);
  @if (map-get($map, $property) == null) {
    @error 'Unknown `#{$property}` in `#{$map}` map.';
    @return null;
  }

  @return var(_define-var($component, $property), $default);
}
