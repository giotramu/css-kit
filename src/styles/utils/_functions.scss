// Positive integer exponent.
@function pow($number, $exponent) {
  $result: 1;

  @if $exponent > 0 {
    @for $_ from 1 through $exponent {
      $result: $result * $number;
    }
  }

  @return $result;
}

// Slightly lighten a color.
@function _tint($color, $percentage: 8%) {
  @return mix(white, $color, $percentage);
}

// Slightly darken a color.
@function _shade($color, $percentage: 8%) {
  @return mix(black, $color, $percentage);
}

// Return a CSS Custom Property definition (e.g. --ck-button-font-size).
@function _defineVar($element, $prop, $scope: true) {
  @if $scope == true {
    @return unquote('--#{$domain}-#{$element}-#{$prop}');
  }

  @return unquote('--#{$element}-#{$prop}');
}

// Return a CSS Custom Property (e.g. var(--ck-button-font-size)).
@function _var($element, $prop) {
  @return var(_defineVar($element, $prop));
}

@function _color($type) {
  @if map-has-key($colors, $type) {
    @return map-get($colors, $type);
  }

  @warn 'Unknown `#{$type}` in $colors map.';
  @return null;
}

@function _shadow($type: 'bottom', $size: 8, $color: _color('accent')) {
  $w: unquote('#{$size}px');

  /* prettier-ignore */
  $shadows: (
    /*  CSS Spec:  | style | offset-x | offset-y | blur-radius | spread-radius | color */
    top          :            0          (-$w)       $w            (-$w)       $color,
    right        :            $w         0           $w            (-$w)       $color,
    bottom       :            0          $w          $w            (-$w)       $color,
    left         :            (-$w)      0           $w            (-$w)       $color,
    all          :            0          0           $w                        $color,
    inset-top    : inset      0          $w          $w            (-$w)       $color,
    inset-right  : inset      (-$w)      0           $w            (-$w)       $color,
    inset-bottom : inset      0          (-$w)       $w            (-$w)       $color,
    inset-left   : inset      $w         0           $w            (-$w)       $color,
    inset-all    : inset      0          0           $w                        $color,

    /* You may also combine and comma separate any shadows from above */
    left-right       : (       (-$w) 0     $w (-$w) $color,       $w    0     $w (-$w) $color),
    top-bottom       : (       0     (-$w) $w (-$w) $color,       0     $w    $w (-$w) $color),
    inset-left-right : (inset  $w    0     $w (-$w) $color, inset (-$w) 0     $w (-$w) $color),
    inset-top-bottom : (inset  0     $w    $w (-$w) $color, inset 0     (-$w) $w (-$w) $color),
  );

  @if map-has-key($shadows, $type) {
    @return map-get($shadows, $type);
  }

  @warn 'Unknown `#{$type}` in $shadows map.';
  @return null;
}

@function _gradient($type: 'accent', $percentage: 0%) {
  @if $type == 'accent' {
    @return radial-gradient(
      circle farthest-corner at 10% 20%,
      _tint(#0072ff, $percentage) 0%,
      _tint(#0084ff, $percentage) 90%
    );
  }

  @if $type == 'dark' {
    @return radial-gradient(
      circle farthest-corner at 10% 20%,
      _tint(#5a5c6a, $percentage) 0%,
      _tint(#202d3a, $percentage) 81.3%
    );
  }

  @if $type == 'light' {
    @return radial-gradient(
      circle farthest-corner at 18.7% 37.8%,
      _shade(#fafafa, $percentage) 0%,
      _shade(#e1eaee, $percentage) 90%
    );
  }

  @warn 'Unknown `#{$type}` in _gradient function.';
  @return null;
}
